* user story for nix-ray

the intention behind nix-ray is to have a tool equal to genoo::ebuild with integrated git support.
one can use this tool to step trough all nix phases manually and rollback to the previous state if needed.

this helps when developing nix extensions

the new command prompt:
| bc-1.06 -u-n-p-a-c-k- configure build checkinstall fixup installCheck dist
| %                                                                         

indicating that:
 - bc-1.06 is the nix expression in the nix-ray debugger
 - -u-n-p-a-c-k- is stroken through text, these phases won't be evaluated by 'nix-ray next' and 'nix-ray genericBuild'
 - all phase names in the PS1 are actually used in the nix expression
 - yello colored phases are already evaluated
 - green colored phases are to be evaluated using 'nix-ray next' or 'nix-ray genericBuild'
     
** nix-shell $NIXREPOS/nixpkgs -A bc / nix-shell -A bc 

create a new git repository associated with the nix expression to be debugged
*** TODO nix-ray bc  
- creates /tmp/nix-ray/bc
- drops you in there
- changes PS1 according to phases in genericBuild 
- git init (empty repo)
- updates PS1 accordingly && stores/restores all environment variables
  
*** TODO nix-ray reset
- drops you into an empty git branch when there are no pending git commits left
- updates PS1 accordingly && stores/restores all environment variables

*** TODO nix-ray list
- lists all phases (usually found in generateBuild function / PS1)

*** TODO nix-ray ignore <phasename> 
- if <phasename> exists it is set to ignore (strike through text in PS1)
- updates PS1 accordingly && stores/restores all environment variables

*** TODO nix-ray unignore <phasename> 
- if <phasename> exists it is set to unignore (no strike through text in PS1)
- unpack configure build checkinstall fixup installCheck dist
- updates PS1 accordingly && stores/restores all environment variables

*** TODO nix-ray genericBuild
- a special wrapper function running all unignored starting by the last phase which was successfully finished
- will only go into next phase when the git index is clean and commited
- will run each phase, commit to git after each invocation until it either
  - fails: it will stop further execution of phases
  - succeeds: will go through all phases and commit to git after each successful invokation
- updates PS1 accordingly && stores/restores all environment variables

*** TODO nix-ray next
- if no pending git commits are there, will execute the next phase in the phase list shown in green
- updates PS1 accordingly && stores/restores all environment variables

*** TODO nix-ray previous
- if no pending git commits are there, will revert to the previous evaluated phase in the phase list shown in green
- updates PS1 accordingly && stores/restores all environment variables

*** TODO nix-ray tree
- list all git commits as a tree output

** best practices
*** since nix-ray is based on git it should be easy to derive patches from git which can be used in nixpkgs
add a small guide how to derive such a patch easily; like 'git format-patch master --stdout'
*** change into a different stored state 
'git checkout c02934c2934c0249c2'
